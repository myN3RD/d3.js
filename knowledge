https://www.w3.org/2000/svg



d3 is used for data visualisation

d3 is a javascript library

d3 always draws from top to bottom by default




on.mouseover doesntwork for me :/




every d3 object has a group (in chrome console)


Implementation:

ONLINE USAGE:

in the head!
<script src="https://d3js.org/d3.v7.min.js"></script>


go to this link (use the current version in url)

https://d3js.org/d3.v7.js                      -> that the entire library




OPTIONAL: to use d3 offline

OFFLINE USAGE:


-> create a file d3.v7.js
-> copy all coe from https://d3js.org/d3.v7.js
-> paste it into the d3.v7.js file


<script src="d3.v7.js"></script>





          SVG (Vector)
          ___

Scalable Vector Graphics


NOTE: in SVG the y coordinate is starting with 0 from the TOP


   x ->

y  0 1 2 3 4 5
⬇
   1
   2
   3
   4
   5
   
   
   
          SOURCES
          _______

https://vizhub.com
https://d3js.org



<body>
  <svg>
  
  </svg>
</body>



NOTICE: the svg tag has a default size (width and height)!

so we have to style it

same for <text></text>


       
       
          ATTRIBUTES
          __________  
        
fill (for color)
stroke (like border)
stroke-width (like border size)




          SHAPES
          ______
          
NOTE: the order of the shapes in the code from top to bottom is like layering "Photoshop Ebenen"
      -> that means the shapes on the top of the code will be UNDER the FOLLOWING shapes


Rectangle <rect>
Ellipse <ellipse>
Polyline <polyline>
Polygon <polygon>



<circle></circle>
<rect/> (rechteck)
<line></line>
<path></path> 
<path d="" />  (for dynamic data-driven lines?)

          (by default its filling -> if we dont want the auto fill -> fill="none")
<text fill="black" x="" y=""></text>




          PATH (Class)
          ____
          
==> for creating customized shapes

has a drawing starting (M) and an end point (L)
-> we can use multiple (L) in one <path

(l) from the current position -> (so L is the current position)
(Z) complete the drawing


<path d="" />

              X  Y    X   Y    X  Y
<path d = "M 50 50 L 100 100 l 25 0">

 <!-- hardcode example -->
       <path d="M 50 50 L 100 100 l 10 60 L 110 0 Z" fill="orange" />



DYNAMIC
_______

1. we have to create an array

var data = [
  {x:10, y:10},
  {x:15, y:20}
];



2. 

area.append('path')
        .attr('fill', 'none')        // if we dont wanna fill it
        .attr('stroke', 'green')
        .attr('d', linearGen(data))  // because in the html file we need the d attribute in th <path  tag




          Pseudo Visualizations
          _____________________

Templates:
https://datavizproject.com/
https://ft-interactive.github.io/visual-vocabulary/
https://depictdatastudio.com/charts/
https://datavizcatalogue.com/index.html
https://www.data-to-viz.com/




          app.js file
          ___________
          
const canvas = d3.select('.canva');

const svg = canvas.append('svg').attr('width', 400).attr('height', 400);

          
svg.append('line').attr('x1', 100).attr('x2', 200).attr('y1', 50).attr('y2', 150).attr('stroke', 'black');


// Text (its actually no text. Its SVG!)
svg.append('text').text('Hello').attr('x', 100).attr('y', 100);




          DYNAMIC DATA USING
          __________________     

// d3
const canvas = d3.select('.canva');
//     i = index:0, 1, 2    // i is the positon in the of the item in the array
var dataArray = [4, 15, 34];

// add svg element
const svg = canvas.append('svg')
            .attr('width', 600)
            .attr('height', 600);

const rect = svg.append('rect');

rect.attr('width', 24)
    .data(dataArray)
    .attr('fill', 'orange')
    .attr('height', 100)
                    // d is data, i is index
    .attr('x', function(d, i) {
      console.log(i);                   // index
      return d*30;
    })
    .attr('y', function(d, i) {
      console.log(d);                   // data
      return d*20;
    });
    
    
    
    
          yAXIS INVERT
          ____________      
                 
    .attr('y', function(d, i) {
      // console.log(d); // data
      return 600 - (d); // svg height - (data)
    });
    
    
    
    
          BAR CHARTS ON THE xAXIS & yAXIS
          _______________________________
          
    .attr('x', function(d, i) {         // der i = index wird auf der x Achse abgebildet
      console.log(i); // index
      console.log(d); // data
      return i*57;
    })
    
    
    .attr('y', function(d, i) {          // der i = index wird auf der y Achse abgebildet
      console.log(i); // index
      console.log(d); // data
      return i*57;
    })
    
    
    
    
          THE ENTER() SELECTION         (with this we dont have to hard code all rect)
          _____________________
           
rect.data(dataArray)
    .enter().append('rect')
    . ...
    . ...
    

NOTE: we dont use any <rect></rect> in html file now!



    
          using JSON (Javascript Object Notation)
          _______________________________________       
                 
type:

d3.json -> hit enter
now we should get this:
d3.json('.json', function(err,data){});
           ⬇
          URL
          
          
// as arrow function          
d3.json('https://jsonplaceholder.typicode.com/todos/1')
  .then(data => {
    console.log(data);
  });




          APIS / PROJECTS
          _______________   
          
Earthquake:        
https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php
-> https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.geojson




          SMOOTH TRANSITIONS/ANIMATIONS
          _____________________________
          
for smooth transitions:

in the css file -> in the specific class for examples

use:

classname {
...
pointer-events: none
}




          LINEAR SCALES (auto height scaling of bars)
          Y COORDINATE
          _____________
        
        
0....1000  Linear Scale >  0...500

        0  Linear Scale >  0                      SCALED DOWN VALUES

      500  Linear Scale >  250


          
[0, 1000] < == DOMAIN (naming)         what we get out of that, is a            [0, 500] < == RANGE            (SCALED DOWN VALUES)



 PULLING THE HEIGHT FROM JSON FILE (because we dont know the MAX height)
 ______________________________________________________________________
 
 
  const y = d3.scaleLinear()
              .domain([0, d3.max(data, d => d.height)])
              .range([0, 350]);




          BAND SCALES (auto width scaling of bars and seperation between them)
          X COORDINATE
          ____________
        
        
If we have several bars, now it's scaling dynamically the width, that all bars will fit in the svg - so it will make the width automatically



EXAMPLE
_______

rect.data(data)
        .enter().append('rect')
        .attr('width', x.bandwidth) // dynamic
        
        

ATTRIBUTES
__________

          .paddingInner(0.05) // between the bars
          .paddingOuter(0.2); // outside from the bars
          
          
          
          
          PUTTING THINGS INTO A CONTAINER (creating a group)
          _______________________________
          
          
we have to use g 
          
const graph = svg.append('g'); // creating a g == group where we put in things (bars)




          INVERTING AXIS
          ______________
          

NOTE: hardest concept in d3

ADD:
 .attr('y', d => y(d.height)) // inverting the y dynamic value        // start drawing from the height of data
